generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              Int           @id @default(autoincrement())
  username            String        @unique
  password            String
  lastname            String
  firstname           String
  phonenumber1        String?
  phonenumber2        String?
  role                String        @default("teacher")
  avatar              String?
  photo               String?
  position            String?
  status              String        @default("active")
  lastLogin           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  accountLockedUntil  DateTime?
  failedLoginAttempts Int           @default(0)
  lastFailedLogin     DateTime?
  activityLogs        ActivityLog[] @relation("ActivityLogUser")
  coursesAsTeacher1   Course[]      @relation("CourseTeacher1")
  coursesAsTeacher2   Course[]      @relation("CourseTeacher2")
  coursesAsTeacher3   Course[]      @relation("CourseTeacher3")
  grades              Grade[]

  @@index([role])
  @@index([status])
  @@index([createdAt])
}

model Student {
  studentId            Int           @id @default(autoincrement())
  lastName             String
  firstName            String
  gender               String
  dob                  DateTime
  class                String
  photo                String?
  phone                String?
  registrationDate     DateTime?
  status               String?
  religion             String?
  health               String?
  emergencyContact     String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  classId              Int?
  needsClothes         Boolean?      @default(false)
  needsMaterials       Boolean?      @default(false)
  needsTransport       Boolean?      @default(false)
  previousSchool       String?
  registerToStudy      Boolean?      @default(false)
  studentBirthDistrict String?
  studentDistrict      String?
  studentHouseNumber   String?
  studentProvince      String?
  studentVillage       String?
  transferReason       String?
  vaccinated           Boolean?      @default(false)
  schoolYear           String?
  studentCommune       String?
  attendances          Attendance[]
  enrollments          Enrollment[]
  family               FamilyInfo?
  grades               Grade[]
  guardians            Guardian[]
  scholarships         Scholarship[]
}

model Guardian {
  guardianId    Int      @id @default(autoincrement())
  studentId     Int
  relation      String
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  believeJesus  Boolean? @default(false)
  birthDistrict String?
  childrenCount Int?
  church        String?
  district      String?
  firstName     String?
  houseNumber   String?
  income        Float?
  lastName      String?
  occupation    String?
  province      String?
  village       String?
  commune       String?
  student       Student  @relation(fields: [studentId], references: [studentId])
}

model FamilyInfo {
  familyinfoId     Int      @id @default(autoincrement())
  studentId        Int      @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canHelpSchool    Boolean? @default(false)
  churchName       String?
  durationInKPC    String?
  helpAmount       Float?
  helpFrequency    String?
  knowSchool       String?
  livingCondition  String?
  livingWith       String?
  organizationHelp String?
  ownHouse         Boolean? @default(false)
  religion         String?
  povertyCard      String?
  student          Student  @relation(fields: [studentId], references: [studentId])
}

model Scholarship {
  scholarshipId Int      @id @default(autoincrement())
  studentId     Int
  type          String?
  amount        Float?
  sponsor       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  student       Student  @relation(fields: [studentId], references: [studentId])
}

model Course {
  courseId     Int          @id @default(autoincrement())
  schoolYearId Int
  teacherId1   Int?
  teacherId2   Int?
  teacherId3   Int?
  grade        String
  section      String
  courseName   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
  schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [schoolYearId])
  teacher1     User?        @relation("CourseTeacher1", fields: [teacherId1], references: [userId])
  teacher2     User?        @relation("CourseTeacher2", fields: [teacherId2], references: [userId])
  teacher3     User?        @relation("CourseTeacher3", fields: [teacherId3], references: [userId])
  enrollments  Enrollment[]
  grades       Grade[]

  @@index([schoolYearId, grade, section])
  @@index([teacherId1])
  @@index([teacherId2])
  @@index([teacherId3])
}

model Subject {
  subjectId   Int      @id @default(autoincrement())
  subjectName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grades      Grade[]
}

model Grade {
  gradeId      Int       @id @default(autoincrement())
  courseId     Int
  studentId    Int
  subjectId    Int
  semesterId   Int
  gradeDate    String
  grade        Float
  gradeComment String?
  userId       Int?
  lastEdit     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  course       Course    @relation(fields: [courseId], references: [courseId])
  semester     Semester  @relation(fields: [semesterId], references: [semesterId])
  student      Student   @relation(fields: [studentId], references: [studentId])
  subject      Subject   @relation(fields: [subjectId], references: [subjectId])
  user         User?     @relation(fields: [userId], references: [userId])

  @@index([studentId, courseId])
  @@index([gradeDate])
  @@index([courseId, studentId, subjectId])
}

model Enrollment {
  enrollmentId Int       @id @default(autoincrement())
  courseId     Int
  studentId    Int
  drop         Boolean
  dropSemesterId Int?
  dropDate     DateTime?
  dropReason   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  course       Course    @relation(fields: [courseId], references: [courseId])
  student      Student   @relation(fields: [studentId], references: [studentId])
  dropSemester Semester? @relation(fields: [dropSemesterId], references: [semesterId])

  @@unique([studentId, courseId])
  @@index([studentId, courseId])
  @@index([drop])
  @@index([dropDate])
  @@index([dropSemesterId])
}

model SchoolYear {
  schoolYearId   Int          @id @default(autoincrement())
  schoolYearCode String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  attendances    Attendance[]
  courses        Course[]
}

model Semester {
  semesterId   Int          @id @default(autoincrement())
  semester     String
  semesterCode String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
  enrollments  Enrollment[]
  grades       Grade[]
}

model Attendance {
  studentId      Int
  session        AttendanceSession
  status         String
  reason         String?
  recordedBy     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  attendanceDate DateTime
  attendanceId   Int               @id @default(autoincrement())
  courseId       Int
  semesterId     Int?
  schoolYearId   Int?
  course         Course            @relation(fields: [courseId], references: [courseId])
  schoolYear     SchoolYear?       @relation(fields: [schoolYearId], references: [schoolYearId])
  semester       Semester?         @relation(fields: [semesterId], references: [semesterId])
  student        Student           @relation(fields: [studentId], references: [studentId])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   String?
  timestamp DateTime @default(now())
  user      User     @relation("ActivityLogUser", fields: [userId], references: [userId])
}

enum AttendanceSession {
  AM
  PM
  FULL
}
