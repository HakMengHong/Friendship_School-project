generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement())
  username     String    @unique
  password     String
  lastname     String
  firstname    String
  phonenumber1 String?
  phonenumber2 String?
  role         String    @default("teacher")
  avatar       String?
  photo        String?
  position     String?
  status       String    @default("active")
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  courses      Course[]  @relation("ClassTeacher")
  activityLogs ActivityLog[] @relation("ActivityLogUser")
}

model Student {
  studentId            Int           @id @default(autoincrement())
  lastName             String
  firstName            String
  gender               String
  dob                  DateTime
  class                String
  photo                String?
  phone                String?
  registrationDate     DateTime?
  status               String?
  religion             String?
  health               String?
  emergencyContact     String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  classId              Int?
  needsClothes         Boolean?      @default(false)
  needsMaterials       Boolean?      @default(false)
  needsTransport       Boolean?      @default(false)
  previousSchool       String?
  registerToStudy      Boolean?      @default(false)
  studentBirthDistrict String?
  studentDistrict      String?
  studentHouseNumber   String?
  studentProvince      String?
  studentVillage       String?
  transferReason       String?
  vaccinated           Boolean?      @default(false)
  schoolYear           String?
  enrollments          Enrollment[]
  family               FamilyInfo?
  grades               Grade[]
  guardians            Guardian[]
  scholarships         Scholarship[]
  attendances          Attendance[]
}

model Guardian {
  guardianId    Int      @id @default(autoincrement())
  studentId     Int
  relation      String
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  believeJesus  Boolean? @default(false)
  birthDistrict String?
  childrenCount Int?
  church        String?
  district      String?
  firstName     String?
  houseNumber   String?
  income        Float?
  lastName      String?
  occupation    String?
  province      String?
  village       String?
  student       Student  @relation(fields: [studentId], references: [studentId])
}

model FamilyInfo {
  familyinfoId     Int      @id @default(autoincrement())
  studentId        Int      @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canHelpSchool    Boolean? @default(false)
  churchName       String?
  durationInKPC    String?
  helpAmount       Float?
  helpFrequency    String?
  knowSchool       String?
  livingCondition  String?
  livingWith       String?
  organizationHelp String?
  ownHouse         Boolean? @default(false)
  religion         String?
  student          Student  @relation(fields: [studentId], references: [studentId])
}

model Scholarship {
  scholarshipId Int      @id @default(autoincrement())
  studentId     Int
  type          String?
  amount        Float?
  sponsor       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  student       Student  @relation(fields: [studentId], references: [studentId])
}

model Course {
  courseId     Int          @id @default(autoincrement())
  schoolYearId Int
  teacherId1   Int?
  teacherId2   Int?
  teacherId3   Int?
  grade       String
  section      String
  courseName   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [schoolYearId])
  teachers     User[]       @relation("ClassTeacher")
  grades       Grade[]
  enrollments  Enrollment[]
}

model Subject {
  subjectId   Int      @id @default(autoincrement())
  subjectName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grades      Grade[]
}

model Grade {
  gradeId      Int        @id @default(autoincrement())
  studentId    Int
  subjectId    Int
  semesterId   Int
  gradeDate    DateTime
  grade        Float
  gradeComment String?
  user         String?
  lastEdit     DateTime?
  gradeType    GradeType?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  gradeCode    String     @unique
  courseId     Int
  course       Course     @relation(fields: [courseId], references: [courseId])
  semester     Semester   @relation(fields: [semesterId], references: [semesterId])
  student      Student    @relation(fields: [studentId], references: [studentId])
  subject      Subject    @relation(fields: [subjectId], references: [subjectId])
}

model Enrollment {
  enrollmentId   Int       @id @default(autoincrement())
  courseId       Int
  studentId      Int
  drop           Boolean
  dropSemester   String?
  dropDate       DateTime?
  course         Course    @relation(fields: [courseId], references: [courseId])
  student        Student   @relation(fields: [studentId], references: [studentId])
}

model SchoolYear {
  schoolYearId   Int      @id @default(autoincrement())
  schoolYearCode String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  courses        Course[]
}

model Semester {
  semesterId   Int      @id @default(autoincrement())
  semester     String
  semesterCode String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  grades       Grade[]
}

enum GradeType {
  exam
  quiz
  assignment
  participation
  other
}

enum AttendanceSession {
  AM
  PM
  FULL
}

// Attendance: Student attendance records
model Attendance {
  id           Int                @id @default(autoincrement())
  studentId    Int
  date         DateTime
  session      AttendanceSession  // AM, PM, or FULL
  status       String             // "present", "absent", "late", "excused"
  reason       String?            // Reason for absence if applicable
  recordedBy   String?            // Username or user ID who recorded
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  student      Student            @relation(fields: [studentId], references: [studentId])
}

// ActivityLog: Audit/history of user actions
model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String   // e.g., "login", "create_student", "update_grade"
  details   String?  // JSON or text details
  timestamp DateTime @default(now())
  user      User     @relation("ActivityLogUser", fields: [userId], references: [userId])
}

// Announcement: School news/events
model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String   // Username or user ID
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}