generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username     String        @unique
  password     String
  lastname     String
  firstname    String
  phonenumber1 String?
  phonenumber2 String?
  role         String        @default("teacher")
  avatar       String?
  photo        String?
  position     String?
  status       String        @default("active")
  lastLogin    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int           @id @default(autoincrement())
  activityLogs ActivityLog[] @relation("ActivityLogUser")
  classes      Class[]       @relation("ClassTeacher")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())
  user      User     @relation("ActivityLogUser", fields: [userId], references: [userId])
}

model Student {
  lastName             String
  firstName            String
  gender               String
  dob                  DateTime
  class                String
  academicYear         String
  photo                String?
  phone                String?
  email                String?
  registrationDate     DateTime
  status               String?
  religion             String?
  health               String?
  emergencyContact     String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  classId              Int?
  needsClothes         Boolean?      @default(false)
  needsMaterials       Boolean?      @default(false)
  needsTransport       Boolean?      @default(false)
  previousSchool       String?
  registerToStudy      Boolean?      @default(false)
  studentBirthDistrict String?
  studentDistrict      String?
  studentHouseNumber   String?
  studentProvince      String?
  studentVillage       String?
  transferReason       String?
  vaccinated           Boolean?      @default(false)
  studentId            Int           @id @default(autoincrement())
  family               FamilyInfo?
  guardians            Guardian[]
  scholarships         Scholarship[]
  classObj             Class?        @relation(fields: [classId], references: [id])
}

model Guardian {
  studentId     Int
  relation      String
  phone         String?
  email         String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  believeJesus  Boolean? @default(false)
  birthDistrict String?
  childrenCount Int?
  church        String?
  district      String?
  firstName     String?
  guardianid    Int      @id @default(autoincrement())
  houseNumber   String?
  income        Float?
  lastName      String?
  occupation    String?
  province      String?
  village       String?
  student       Student  @relation(fields: [studentId], references: [studentId])
}

model FamilyInfo {
  id               Int      @id @default(autoincrement())
  studentId        Int      @unique
  fatherName       String?
  motherName       String?
  siblings         Int?
  fatherPhone      String?
  motherPhone      String?
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canHelpSchool    Boolean? @default(false)
  churchName       String?
  durationInKPC    String?
  helpAmount       Float?
  helpFrequency    String?
  knowSchool       String?
  livingCondition  String?
  livingWith       String?
  organizationHelp String?
  ownHouse         Boolean? @default(false)
  religion         String?
  student          Student  @relation(fields: [studentId], references: [studentId])
}

model Scholarship {
  id        Int      @id @default(autoincrement())
  studentId Int
  type      String?
  amount    Float?
  sponsor   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [studentId])
}

model Course {
  id           Int      @id @default(autoincrement())
  courseId     String   @unique
  schoolYearId Int
  teacherId1   Int?
  teacherId2   Int?
  teacherId3   Int?
  grade        String
  section      String
  courseName   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subject {
  id          Int      @id @default(autoincrement())
  subjectId   String   @unique
  subjectName String
  credits     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Grade {
  id           Int        @id @default(autoincrement())
  gradeId      String     @unique
  courseId     Int
  studentId    Int
  subjectId    Int
  semesterId   Int
  gradeDate    DateTime
  grade        Float
  gradeComment String?
  user         String?
  lastEdit     DateTime?
  gradeType    GradeType?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Enrollment {
  id            Int       @id @default(autoincrement())
  enrollmentId  String    @unique
  courseId      Int
  studentId     Int
  droup         Boolean
  droupSemester String?
  droupDate     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Class {
  id        Int       @id @default(autoincrement())
  className String    @unique
  grade     String
  section   String?
  students  Student[]
  teachers  User[]    @relation("ClassTeacher")
}

enum GradeType {
  exam
  quiz
  assignment
  participation
  other
}

enum AttendanceSession {
  AM
  PM
  FULL
}
