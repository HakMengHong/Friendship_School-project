generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// ENUMS
// =========================

// GradeType: Type of grade (exam, quiz, assignment, etc.)
enum GradeType {
  exam
  quiz
  assignment
  participation
  other
}

// AttendanceSession: Which session the attendance is for (AM, PM, FULL)
enum AttendanceSession {
  AM
  PM
  FULL
}

// =========================
// MODELS
// =========================

// User: Teachers and Admins only
model User {
  userId          Int            @id @default(autoincrement())
  username        String         @unique // Login username
  password        String // Hashed password
  lastname        String
  firstname       String
  phonenumber1    String?
  phonenumber2    String?
  role            String         @default("teacher") // "teacher" or "admin"
  avatar          String?
  photo           String? // Profile photo URL
  position        String? // e.g., "គ្រូបន្ទុកថ្នាក់ទី ១", "នាយក"
  status          String         @default("active") // "active", "inactive", "suspended"
  lastLogin       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // Relations
  activityLogs    ActivityLog[]  @relation("ActivityLogUser")
}

// Student: Registered students
model Student {
  studentId        Int           @id @default(autoincrement())
  lastName         String
  firstName        String
  gender           String
  dob              DateTime
  // Address fields (flat)
  studentHouseNumber String?
  studentVillage     String?
  studentDistrict    String?
  studentProvince    String?
  studentBirthDistrict String?
  // Registration and class
  class            String
  academicYear     String
  registrationDate DateTime
  registerToStudy  Boolean?      @default(false)
  // Contact
  photo            String?
  phone            String?
  email            String?
  // Status and health
  status           String? // e.g., "active", "dropped", "graduated"
  religion         String?
  health           String?
  emergencyContact String?
  vaccinated       Boolean?      @default(false)
  // Study info
  previousSchool   String?
  transferReason   String?
  // Needs (checkboxes)
  needsClothes     Boolean?      @default(false)
  needsMaterials   Boolean?      @default(false)
  needsTransport   Boolean?      @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  // Relations
  guardians        Guardian[]
  scholarships     Scholarship[]
  family           FamilyInfo?
  classObj         Class?        @relation(fields: [classId], references: [id])
  classId          Int?
}

// Guardian: Parent/guardian info for students
model Guardian {
  guardianid       Int      @id @default(autoincrement())
  studentId        Int
  // Name fields (flat)
  lastName         String?
  firstName        String?
  // Relation and contact
  relation         String // e.g., "father", "mother", "guardian"
  phone            String?
  email            String?
  // Address fields (flat)
  houseNumber      String?
  village          String?
  district         String?
  province         String?
  birthDistrict    String?
  // Other info
  occupation       String?
  income           Float?
  childrenCount    Int?
  believeJesus     Boolean? @default(false)
  church           String?
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  student          Student  @relation(fields: [studentId], references: [studentId])
}

// FamilyInfo: Detailed family data for students (optional)
model FamilyInfo {
  id              Int      @id @default(autoincrement())
  studentId       Int      @unique
  // Family situation fields (flat)
  livingWith      String?
  ownHouse        Boolean? @default(false)
  durationInKPC   String?
  livingCondition String?
  organizationHelp String?
  knowSchool      String?
  religion        String?
  churchName      String?
  canHelpSchool   Boolean? @default(false)
  helpAmount      Float?
  helpFrequency   String?
  // Legacy/compatibility fields
  fatherName      String?
  motherName      String?
  siblings        Int?
  fatherPhone     String?
  motherPhone     String?
  address         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  student         Student  @relation(fields: [studentId], references: [studentId])
}

// Scholarship: Scholarships awarded to students (optional)
model Scholarship {
  id        Int      @id @default(autoincrement())
  studentId Int
  type      String?
  amount    Float?
  sponsor   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
}

// Course: School courses/classes
model Course {
  id           Int      @id @default(autoincrement())
  courseId     String   @unique // School-issued course code
  schoolYearId Int
  teacherId1   Int?
  teacherId2   Int?
  teacherId3   Int?
  grade        String
  section      String
  courseName   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Subject: Subjects taught in school
model Subject {
  id          Int      @id @default(autoincrement())
  subjectId   String   @unique // School-issued subject code
  subjectName String
  credits     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Grade: Student grades per subject/course/semester
model Grade {
  id           Int        @id @default(autoincrement())
  gradeId      String     @unique // School-issued grade record code
  courseId     Int
  studentId    Int
  subjectId    Int
  semesterId   Int
  gradeDate    DateTime
  grade        Float
  gradeComment String?
  user         String? // Username or user ID who recorded/edited
  lastEdit     DateTime?
  gradeType    GradeType? // Type of grade (exam, quiz, etc.)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Enrollment: Student enrollment in courses
model Enrollment {
  id            Int       @id @default(autoincrement())
  enrollmentId  String    @unique // School-issued enrollment code
  courseId      Int
  studentId     Int
  droup         Boolean // true if dropped, false if still enrolled
  droupSemester String? // Semester in which the student dropped
  droupDate     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


// Class: School classes/groups
model Class {
  id        Int       @id @default(autoincrement())
  className String    @unique // e.g., "7A", "8B"
  grade     String
  section   String?
  students  Student[]
  teachers  User[]    @relation("ClassTeacher")
}
