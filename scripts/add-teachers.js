const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function addTeachers() {
  console.log('üë• Adding Teachers to Database');
  console.log('==============================\n');

  try {
    // Sample teachers data
    const teachers = [
      {
        username: '·û†·û∂·ûÄ·üã·ûò·üâ·üÅ·ûÑ·û†·ûª·ûÑ',
        firstname: '·û†·û∂·ûÄ·üã',
        lastname: '·ûò·üâ·üÅ·ûÑ·û†·ûª·ûÑ',
        role: 'teacher',
        position: '·ûÇ·üí·ûö·ûº·ûî·ûÑ·üí·ûö·üÄ·ûì',
        phonenumber1: '012345678',
        status: 'active'
      },
      {
        username: '·û†·üÅ·ûÑ·ûü·ûª·ûì·û∏',
        firstname: '·û†·üÅ·ûÑ',
        lastname: '·ûü·ûª·ûì·û∏',
        role: 'teacher',
        position: '·ûÇ·üí·ûö·ûº·ûî·ûÑ·üí·ûö·üÄ·ûì',
        phonenumber1: '012345679',
        status: 'active'
      },
      {
        username: '·ûú·üâ·û∂·ûì·üã·ûü·ûª·ûï·ûõ',
        firstname: '·ûú·üâ·û∂·ûì·üã',
        lastname: '·ûü·ûª·ûï·ûõ',
        role: 'teacher',
        position: '·ûÇ·üí·ûö·ûº·ûî·ûÑ·üí·ûö·üÄ·ûì',
        phonenumber1: '012345680',
        status: 'active'
      },
      {
        username: '·ûÇ·ûπ·ûò·ûü·ûª·ûÅ·û∂',
        firstname: '·ûÇ·ûπ·ûò',
        lastname: '·ûü·ûª·ûÅ·û∂',
        role: 'teacher',
        position: '·ûÇ·üí·ûö·ûº·ûî·ûÑ·üí·ûö·üÄ·ûì',
        phonenumber1: '012345681',
        status: 'active'
      },
      {
        username: '·ûò·üâ·üÖ·ûü·ûª·ûí·û∂·ûö·û∏',
        firstname: '·ûò·üâ·üÖ',
        lastname: '·ûü·ûª·ûí·û∂·ûö·û∏',
        role: 'teacher',
        position: '·ûÇ·üí·ûö·ûº·ûî·ûÑ·üí·ûö·üÄ·ûì',
        phonenumber1: '012345682',
        status: 'active'
      }
    ];

    console.log('üìù Adding teachers...\n');

    for (const teacher of teachers) {
      try {
        // Check if teacher already exists
        const existingTeacher = await prisma.user.findUnique({
          where: { username: teacher.username }
        });

        if (existingTeacher) {
          console.log(`‚ö†Ô∏è  Teacher ${teacher.firstname} ${teacher.lastname} already exists`);
          continue;
        }

        // Hash password (default password: 'password')
        const hashedPassword = await bcrypt.hash('password', 10);

        // Create teacher
        const newTeacher = await prisma.user.create({
          data: {
            username: teacher.username,
            password: hashedPassword,
            firstname: teacher.firstname,
            lastname: teacher.lastname,
            role: teacher.role,
            position: teacher.position,
            phonenumber1: teacher.phonenumber1,
            status: teacher.status,
            avatar: `${teacher.firstname.charAt(0)}${teacher.lastname.charAt(0)}`
          }
        });

        console.log(`‚úÖ Added teacher: ${teacher.firstname} ${teacher.lastname} (ID: ${newTeacher.userId})`);
      } catch (error) {
        console.error(`‚ùå Error adding teacher ${teacher.firstname} ${teacher.lastname}:`, error.message);
      }
    }

    // Show final count
    const teacherCount = await prisma.user.count({ where: { role: 'teacher' } });
    const totalUsers = await prisma.user.count();
    
    console.log('\nüìä Final Database Status:');
    console.log('---------------------------');
    console.log(`Total Users: ${totalUsers}`);
    console.log(`Teachers: ${teacherCount}`);

    if (teacherCount > 0) {
      console.log('\nüéâ Teachers added successfully!');
      console.log('Default password for all teachers: password');
    } else {
      console.log('\n‚ö†Ô∏è  No teachers were added. Check the errors above.');
    }

  } catch (error) {
    console.error('‚ùå Error in addTeachers function:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the function
addTeachers();
