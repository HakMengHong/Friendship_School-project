#!/usr/bin/env node

/**
 * Change User IDs Script
 * 
 * WARNING: This will change user IDs and may break existing data!
 * Only proceed if you understand the risks.
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Desired user ID mapping
const DESIRED_MAPPING = {
  1: '·ûô·ûø·ûì·ûü·ûª·ûÅ·ûö·üâ·üÇ·ûì',
  2: '·ûè·üÉ·ûü·üä·û∏·ûé·üÉ', 
  3: '·ûü·ûΩ·ûì·ûô·û∂·ûÑ·ûü·üí·ûö·üÅ·ûÑ',
  4: '·ûê·ûì·ûî·üâ·ûª·ûì·ûé·û∂·ûö·û∑·ûë·üí·ûí',
  5: '·û¢·üä·û∂·ûÑ·ûü·üí·ûö·û∏·ûé·ûº',
  6: '·ûÖ·û∂·ûì·üã·ûÅ·üÅ·ûò·û∂',
  7: '·û†·üÅ·ûÑ·ûü·ûª·ûì·û∏',
  8: '·ûü·üí·ûö·ûº·ûô·ûÖ·û∂·ûì·üã·ûì·û∂·ûè',
  9: '·ûü·üä·û∏·ûò·ûü·üÜ·ûé·û∂·ûÑ',
  10: '·ûü·üí·ûö·ûº·ûô·ûü·üä·û∏·ûé·û∂·ûè',
  11: 'admin'
};

// Current to new ID mapping
const ID_MAPPING = {
  2: 1,   // ·ûô·ûø·ûì·ûü·ûª·ûÅ·ûö·üâ·üÇ·ûì: 2 -> 1
  3: 2,   // ·ûè·üÉ·ûü·üä·û∏·ûé·üÉ: 3 -> 2
  12: 3,  // ·ûü·ûΩ·ûì·ûô·û∂·ûÑ·ûü·üí·ûö·üÅ·ûÑ: 12 -> 3
  5: 4,   // ·ûê·ûì·ûî·üâ·ûª·ûì·ûé·û∂·ûö·û∑·ûë·üí·ûí: 5 -> 4
  6: 5,   // ·û¢·üä·û∂·ûÑ·ûü·üí·ûö·û∏·ûé·ûº: 6 -> 5
  7: 6,   // ·ûÖ·û∂·ûì·üã·ûÅ·üÅ·ûò·û∂: 7 -> 6
  8: 7,   // ·û†·üÅ·ûÑ·ûü·ûª·ûì·û∏: 8 -> 7
  9: 8,   // ·ûü·üí·ûö·ûº·ûô·ûÖ·û∂·ûì·üã·ûì·û∂·ûè: 9 -> 8
  10: 9,  // ·ûü·üä·û∏·ûò·ûü·üÜ·ûé·û∂·ûÑ: 10 -> 9
  11: 10, // ·ûü·üí·ûö·ûº·ûô·ûü·üä·û∏·ûé·û∂·ûè: 11 -> 10
  1: 11   // admin: 1 -> 11
};

async function backupCurrentData() {
  console.log('üíæ Creating backup of current data...');
  
  try {
    // Get all current data
    const users = await prisma.user.findMany();
    const courses = await prisma.course.findMany();
    const grades = await prisma.grade.findMany();
    const activityLogs = await prisma.activityLog.findMany();
    
    console.log(`‚úÖ Backed up: ${users.length} users, ${courses.length} courses, ${grades.length} grades, ${activityLogs.length} activity logs`);
    
    return { users, courses, grades, activityLogs };
  } catch (error) {
    console.error('‚ùå Error creating backup:', error);
    throw error;
  }
}

async function clearRelatedData() {
  console.log('üßπ Clearing related data that references users...');
  
  try {
    // Clear grades
    console.log('   Clearing grades...');
    await prisma.grade.deleteMany();
    
    // Clear activity logs
    console.log('   Clearing activity logs...');
    await prisma.activityLog.deleteMany();
    
    // Clear course teacher assignments
    console.log('   Clearing course teacher assignments...');
    await prisma.course.updateMany({
      data: {
        teacherId1: null,
        teacherId2: null,
        teacherId3: null
      }
    });
    
    console.log('‚úÖ Related data cleared');
  } catch (error) {
    console.error('‚ùå Error clearing related data:', error);
    throw error;
  }
}

async function deleteAllUsers() {
  console.log('üóëÔ∏è Deleting all users...');
  
  try {
    await prisma.user.deleteMany();
    console.log('‚úÖ All users deleted');
  } catch (error) {
    console.error('‚ùå Error deleting users:', error);
    throw error;
  }
}

async function createUsersInNewOrder() {
  console.log('üë• Creating users in new order...');
  
  const newUsers = [
    { userId: 1, username: '·ûô·ûø·ûì·ûü·ûª·ûÅ·ûö·üâ·üÇ·ûì', firstname: '·ûü·ûª·ûÅ·ûö·üâ·üÇ·ûì', lastname: '·ûô·ûø·ûì', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü°', avatar: '·ûü·ûô' },
    { userId: 2, username: '·ûè·üÉ·ûü·üä·û∏·ûé·üÉ', firstname: '·ûü·üä·û∏·ûé·üÉ', lastname: '·ûè·üÉ', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü¢', avatar: '·ûü·ûè' },
    { userId: 3, username: '·ûü·ûΩ·ûì·ûô·û∂·ûÑ·ûü·üí·ûö·üÅ·ûÑ', firstname: '·ûô·û∂·ûÑ·ûü·üí·ûö·üÅ·ûÑ', lastname: '·ûü·ûΩ·ûì', role: 'teacher', status: 'active', phonenumber1: '012345678', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü£', avatar: '·ûô·ûü' },
    { userId: 4, username: '·ûê·ûì·ûî·üâ·ûª·ûì·ûé·û∂·ûö·û∑·ûë·üí·ûí', firstname: '·ûî·üâ·ûª·ûì·ûé·û∂·ûö·û∑·ûë·üí·ûí', lastname: '·ûê·ûì', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü§', avatar: '·ûî·ûê' },
    { userId: 5, username: '·û¢·üä·û∂·ûÑ·ûü·üí·ûö·û∏·ûé·ûº', firstname: '·ûü·üí·ûö·û∏·ûé·ûº', lastname: '·û¢·üä·û∂·ûÑ', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü•', avatar: '·ûü·û¢' },
    { userId: 6, username: '·ûÖ·û∂·ûì·üã·ûÅ·üÅ·ûò·û∂', firstname: '·ûÅ·üÅ·ûò·û∂', lastname: '·ûÖ·û∂·ûì·üã', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü¶', avatar: '·ûÅ·ûÖ' },
    { userId: 7, username: '·û†·üÅ·ûÑ·ûü·ûª·ûì·û∏', firstname: '·ûü·ûª·ûì·û∏', lastname: '·û†·üÅ·ûÑ', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·üß', avatar: '·ûü·û†' },
    { userId: 8, username: '·ûü·üí·ûö·ûº·ûô·ûÖ·û∂·ûì·üã·ûì·û∂·ûè', firstname: '·ûÖ·û∂·ûì·üã·ûì·û∂·ûè', lastname: '·ûü·üí·ûö·ûº·ûô', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü®', avatar: '·ûÖ·ûü' },
    { userId: 9, username: '·ûü·üä·û∏·ûò·ûü·üÜ·ûé·û∂·ûÑ', firstname: '·ûü·üÜ·ûé·û∂·ûÑ', lastname: '·ûü·üä·û∏·ûò', role: 'teacher', status: 'active', phonenumber1: '0123456789', position: '·ûÇ·üí·ûö·ûº·ûî·ûì·üí·ûë·ûª·ûÄ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ ·ü©', avatar: '·ûü·ûü' },
    { userId: 10, username: '·ûü·üí·ûö·ûº·ûô·ûü·üä·û∏·ûé·û∂·ûè', firstname: '·ûü·üä·û∏·ûé·û∂·ûè', lastname: '·ûü·üí·ûö·ûº·ûô', role: 'admin', status: 'active', phonenumber1: '0123456789', position: '·ûì·û∂·ûô·û∑·ûÄ·û∂', avatar: '·ûü·ûü' },
    { userId: 11, username: 'admin', firstname: 'Admin', lastname: 'User', role: 'admin', status: 'active', phonenumber1: '012345678', position: 'System Administrator', avatar: 'AU' }
  ];
  
  try {
    for (const userData of newUsers) {
      await prisma.user.create({
        data: {
          userId: userData.userId,
          username: userData.username,
          password: '$2b$10$example', // You'll need to set proper passwords
          firstname: userData.firstname,
          lastname: userData.lastname,
          role: userData.role,
          status: userData.status,
          phonenumber1: userData.phonenumber1,
          position: userData.position,
          avatar: userData.avatar,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log(`‚úÖ Created user: ${userData.username} (ID: ${userData.userId})`);
    }
    
    console.log('‚úÖ All users created in new order');
  } catch (error) {
    console.error('‚ùå Error creating users:', error);
    throw error;
  }
}

async function restoreCourseAssignments() {
  console.log('üìö Restoring course teacher assignments...');
  
  try {
    // Update course assignments with new user IDs
    await prisma.course.updateMany({
      where: { courseId: 1 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 9
      data: { teacherId1: 9 } // ·ûü·üä·û∏·ûò·ûü·üÜ·ûé·û∂·ûÑ (was 10, now 9)
    });
    
    await prisma.course.updateMany({
      where: { courseId: 2 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 1
      data: { teacherId1: 1 } // ·ûô·ûø·ûì·ûü·ûª·ûÅ·ûö·üâ·üÇ·ûì (was 2, now 1)
    });
    
    await prisma.course.updateMany({
      where: { courseId: 3 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 2
      data: { teacherId1: 2 } // ·ûè·üÉ·ûü·üä·û∏·ûé·üÉ (was 3, now 2)
    });
    
    await prisma.course.updateMany({
      where: { courseId: 4 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 3
      data: { teacherId1: 3 } // ·ûü·ûΩ·ûì·ûô·û∂·ûÑ·ûü·üí·ûö·üÅ·ûÑ (was 12, now 3)
    });
    
    await prisma.course.updateMany({
      where: { courseId: 5 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 4
      data: { teacherId1: 4 } // ·ûê·ûì·ûî·üâ·ûª·ûì·ûé·û∂·ûö·û∑·ûë·üí·ûí (was 5, now 4)
    });
    
    await prisma.course.updateMany({
      where: { courseId: 6 }, // ·ûê·üí·ûì·û∂·ûÄ·üã·ûë·û∏ 5
      data: { teacherId1: 5 } // ·û¢·üä·û∂·ûÑ·ûü·üí·ûö·û∏·ûé·ûº (was 6, now 5)
    });
    
    console.log('‚úÖ Course assignments restored');
  } catch (error) {
    console.error('‚ùå Error restoring course assignments:', error);
    throw error;
  }
}

async function verifyResults() {
  console.log('üîç Verifying results...');
  
  try {
    const users = await prisma.user.findMany({
      orderBy: { userId: 'asc' }
    });
    
    console.log('\nüìä Final User List:');
    users.forEach(user => {
      console.log(`ID ${user.userId}: ${user.username} (${user.firstname} ${user.lastname})`);
    });
    
    const courses = await prisma.course.findMany({
      where: { teacherId1: { not: null } }
    });
    
    console.log('\nüìö Course Assignments:');
    courses.forEach(course => {
      console.log(`${course.courseName}: Teacher ID ${course.teacherId1}`);
    });
    
    console.log('\n‚úÖ User ID change completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error verifying results:', error);
    throw error;
  }
}

async function main() {
  console.log('üö® WARNING: This will change user IDs and delete related data!');
  console.log('üìã This process will:');
  console.log('   1. Delete all grades and activity logs');
  console.log('   2. Clear course teacher assignments');
  console.log('   3. Delete all users');
  console.log('   4. Recreate users with new IDs');
  console.log('   5. Restore course assignments');
  console.log('');
  
  try {
    // Step 1: Backup current data
    await backupCurrentData();
    
    // Step 2: Clear related data
    await clearRelatedData();
    
    // Step 3: Delete all users
    await deleteAllUsers();
    
    // Step 4: Create users in new order
    await createUsersInNewOrder();
    
    // Step 5: Restore course assignments
    await restoreCourseAssignments();
    
    // Step 6: Verify results
    await verifyResults();
    
    console.log('\nüéâ User ID change completed successfully!');
    console.log('üìù Note: You may need to reset passwords for the recreated users.');
    
  } catch (error) {
    console.error('üí• Process failed:', error);
    console.log('üîÑ You may need to restore from backup if something went wrong.');
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { DESIRED_MAPPING, ID_MAPPING };
